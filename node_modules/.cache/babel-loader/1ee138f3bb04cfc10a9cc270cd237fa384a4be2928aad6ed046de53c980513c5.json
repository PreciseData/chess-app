{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\chess-app\\\\src\\\\components\\\\GameTimer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './GameTimer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameTimer({\n  currentPlayer,\n  gameStatus,\n  onTimeUp,\n  initialTime = 600\n}) {\n  _s();\n  // Initialize timers (in seconds)\n  const [whiteTime, setWhiteTime] = useState(initialTime);\n  const [blackTime, setBlackTime] = useState(initialTime);\n  const [isRunning, setIsRunning] = useState(true);\n\n  // Format time as mm:ss\n  const formatTime = seconds => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  // Timer effect\n  useEffect(() => {\n    // Don't run timer if game is over\n    if (gameStatus !== 'active') {\n      setIsRunning(false);\n      return;\n    }\n\n    // Start the timer\n    let interval = null;\n    if (isRunning) {\n      interval = setInterval(() => {\n        if (currentPlayer === 'white') {\n          setWhiteTime(prevTime => {\n            if (prevTime <= 1) {\n              clearInterval(interval);\n              onTimeUp('white');\n              return 0;\n            }\n            return prevTime - 1;\n          });\n        } else {\n          setBlackTime(prevTime => {\n            if (prevTime <= 1) {\n              clearInterval(interval);\n              onTimeUp('black');\n              return 0;\n            }\n            return prevTime - 1;\n          });\n        }\n      }, 1000);\n    }\n\n    // Clean up interval on unmount\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [currentPlayer, gameStatus, isRunning, onTimeUp]);\n\n  // Pause/resume timer\n  const toggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n\n  // Reset timers\n  const resetTimers = () => {\n    setWhiteTime(initialTime);\n    setBlackTime(initialTime);\n    setIsRunning(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-timer\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Game Timer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-display\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `player-timer ${currentPlayer === 'white' ? 'active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"player-label\",\n          children: \"White:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"time\",\n          children: formatTime(whiteTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `player-timer ${currentPlayer === 'black' ? 'active' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"player-label\",\n          children: \"Black:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"time\",\n          children: formatTime(blackTime)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleTimer,\n        disabled: gameStatus !== 'active',\n        children: isRunning ? 'Pause' : 'Resume'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetTimers,\n        disabled: gameStatus === 'active' && isRunning,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(GameTimer, \"1ZkLiCvuVHB/JbHOSd4wKiiZMVI=\");\n_c = GameTimer;\nexport default GameTimer;\nvar _c;\n$RefreshReg$(_c, \"GameTimer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","GameTimer","currentPlayer","gameStatus","onTimeUp","initialTime","_s","whiteTime","setWhiteTime","blackTime","setBlackTime","isRunning","setIsRunning","formatTime","seconds","minutes","Math","floor","remainingSeconds","toString","padStart","interval","setInterval","prevTime","clearInterval","toggleTimer","resetTimers","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/aksha/AppData/Local/Programs/Microsoft VS Code/chess-app/src/components/GameTimer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './GameTimer.css';\n\nfunction GameTimer({ currentPlayer, gameStatus, onTimeUp, initialTime = 600 }) {\n  // Initialize timers (in seconds)\n  const [whiteTime, setWhiteTime] = useState(initialTime);\n  const [blackTime, setBlackTime] = useState(initialTime);\n  const [isRunning, setIsRunning] = useState(true);\n  \n  // Format time as mm:ss\n  const formatTime = (seconds) => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n  \n  // Timer effect\n  useEffect(() => {\n    // Don't run timer if game is over\n    if (gameStatus !== 'active') {\n      setIsRunning(false);\n      return;\n    }\n    \n    // Start the timer\n    let interval = null;\n    if (isRunning) {\n      interval = setInterval(() => {\n        if (currentPlayer === 'white') {\n          setWhiteTime(prevTime => {\n            if (prevTime <= 1) {\n              clearInterval(interval);\n              onTimeUp('white');\n              return 0;\n            }\n            return prevTime - 1;\n          });\n        } else {\n          setBlackTime(prevTime => {\n            if (prevTime <= 1) {\n              clearInterval(interval);\n              onTimeUp('black');\n              return 0;\n            }\n            return prevTime - 1;\n          });\n        }\n      }, 1000);\n    }\n    \n    // Clean up interval on unmount\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [currentPlayer, gameStatus, isRunning, onTimeUp]);\n  \n  // Pause/resume timer\n  const toggleTimer = () => {\n    setIsRunning(!isRunning);\n  };\n  \n  // Reset timers\n  const resetTimers = () => {\n    setWhiteTime(initialTime);\n    setBlackTime(initialTime);\n    setIsRunning(true);\n  };\n  \n  return (\n    <div className=\"game-timer\">\n      <h2>Game Timer</h2>\n      \n      <div className=\"timer-display\">\n        <div className={`player-timer ${currentPlayer === 'white' ? 'active' : ''}`}>\n          <span className=\"player-label\">White:</span>\n          <span className=\"time\">{formatTime(whiteTime)}</span>\n        </div>\n        \n        <div className={`player-timer ${currentPlayer === 'black' ? 'active' : ''}`}>\n          <span className=\"player-label\">Black:</span>\n          <span className=\"time\">{formatTime(blackTime)}</span>\n        </div>\n      </div>\n      \n      <div className=\"timer-controls\">\n        <button onClick={toggleTimer} disabled={gameStatus !== 'active'}>\n          {isRunning ? 'Pause' : 'Resume'}\n        </button>\n        <button onClick={resetTimers} disabled={gameStatus === 'active' && isRunning}>\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default GameTimer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}