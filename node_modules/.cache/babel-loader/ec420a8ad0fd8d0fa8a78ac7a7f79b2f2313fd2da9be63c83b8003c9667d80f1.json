{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\chess-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport GameTimer from './components/GameTimer';\nimport PromotionDialog from './components/PromotionDialog';\nimport GameSettings from './components/GameSettings';\nimport { isValidMove, wouldBeInCheck, isKingInCheck, isCheckmate, isStalemate, canPromotePawn, getCastlingMove, getEnPassantCapture, updateCastlingRights } from './utils/chessRules';\nimport { getBestMove } from './utils/aiPlayer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Game settings state\n  const [showSettings, setShowSettings] = useState(true);\n  const [gameSettings, setGameSettings] = useState({\n    playerColor: 'white',\n    opponent: 'human',\n    aiDifficulty: 'medium',\n    timerEnabled: true,\n    timeLimit: 600 // 10 minutes in seconds\n  });\n\n  // Game state\n  const [gameState, setGameState] = useState({\n    board: initializeBoard(),\n    currentPlayer: 'white',\n    selectedPiece: null,\n    gameStatus: 'active',\n    // active, check, checkmate, stalemate\n    moveHistory: [],\n    lastMove: null,\n    castlingRights: {\n      whiteKingside: true,\n      whiteQueenside: true,\n      blackKingside: true,\n      blackQueenside: true\n    },\n    promotionPending: null\n  });\n\n  // Timer callbacks\n  const handleTimeUp = color => {\n    setGameState({\n      ...gameState,\n      gameStatus: 'timeout',\n      moveHistory: [...gameState.moveHistory, {\n        special: `${color} timeout`\n      }]\n    });\n  };\n\n  // Effect for AI moves\n  useEffect(() => {\n    // Make AI move if it's AI's turn\n    if (gameSettings.opponent === 'ai' && gameState.gameStatus === 'active' && gameState.currentPlayer !== gameSettings.playerColor && !gameState.promotionPending) {\n      // Small delay to make AI move feel more natural\n      const aiMoveTimeout = setTimeout(() => {\n        const aiMove = getBestMove(gameState.board, gameState.currentPlayer, gameState.castlingRights, gameState.lastMove, gameSettings.aiDifficulty);\n        if (aiMove) {\n          handleMove(aiMove.fromRow, aiMove.fromCol, aiMove.toRow, aiMove.toCol);\n        }\n      }, 500);\n      return () => clearTimeout(aiMoveTimeout);\n    }\n  }, [gameState.currentPlayer, gameState.gameStatus, gameSettings.opponent]);\n  function initializeBoard() {\n    // Create an 8x8 board with initial chess positions\n    const board = Array(8).fill().map(() => Array(8).fill(null));\n\n    // Set up pawns\n    for (let i = 0; i < 8; i++) {\n      board[1][i] = {\n        type: 'pawn',\n        color: 'black'\n      };\n      board[6][i] = {\n        type: 'pawn',\n        color: 'white'\n      };\n    }\n\n    // Set up rooks\n    board[0][0] = {\n      type: 'rook',\n      color: 'black'\n    };\n    board[0][7] = {\n      type: 'rook',\n      color: 'black'\n    };\n    board[7][0] = {\n      type: 'rook',\n      color: 'white'\n    };\n    board[7][7] = {\n      type: 'rook',\n      color: 'white'\n    };\n\n    // Set up knights\n    board[0][1] = {\n      type: 'knight',\n      color: 'black'\n    };\n    board[0][6] = {\n      type: 'knight',\n      color: 'black'\n    };\n    board[7][1] = {\n      type: 'knight',\n      color: 'white'\n    };\n    board[7][6] = {\n      type: 'knight',\n      color: 'white'\n    };\n\n    // Set up bishops\n    board[0][2] = {\n      type: 'bishop',\n      color: 'black'\n    };\n    board[0][5] = {\n      type: 'bishop',\n      color: 'black'\n    };\n    board[7][2] = {\n      type: 'bishop',\n      color: 'white'\n    };\n    board[7][5] = {\n      type: 'bishop',\n      color: 'white'\n    };\n\n    // Set up queens\n    board[0][3] = {\n      type: 'queen',\n      color: 'black'\n    };\n    board[7][3] = {\n      type: 'queen',\n      color: 'white'\n    };\n\n    // Set up kings\n    board[0][4] = {\n      type: 'king',\n      color: 'black'\n    };\n    board[7][4] = {\n      type: 'king',\n      color: 'white'\n    };\n    return board;\n  }\n\n  // Function to clear the board\n  const clearBoard = () => {\n    const emptyBoard = Array(8).fill().map(() => Array(8).fill(null));\n    setGameState({\n      ...gameState,\n      board: emptyBoard,\n      selectedPiece: null,\n      moveHistory: [...gameState.moveHistory, {\n        special: 'board-cleared'\n      }]\n    });\n  };\n\n  // Function to reset the board to initial position\n  const resetBoard = () => {\n    setGameState({\n      board: initializeBoard(),\n      currentPlayer: 'white',\n      selectedPiece: null,\n      gameStatus: 'active',\n      moveHistory: [],\n      lastMove: null,\n      castlingRights: {\n        whiteKingside: true,\n        whiteQueenside: true,\n        blackKingside: true,\n        blackQueenside: true\n      },\n      promotionPending: null\n    });\n  };\n\n  // Handle promotion selection\n  const handlePromotion = pieceType => {\n    if (!gameState.promotionPending) return;\n    const {\n      row,\n      col,\n      color\n    } = gameState.promotionPending;\n    const newBoard = [...gameState.board.map(row => [...row])];\n\n    // Replace the pawn with the selected piece\n    newBoard[row][col] = {\n      type: pieceType,\n      color\n    };\n\n    // Update game state\n    setGameState({\n      ...gameState,\n      board: newBoard,\n      promotionPending: null,\n      moveHistory: [...gameState.moveHistory, {\n        special: `${color} pawn promoted to ${pieceType}`\n      }]\n    });\n\n    // Check for checkmate or stalemate after promotion\n    updateGameStatus(newBoard, gameState.currentPlayer);\n  };\n\n  // Cancel promotion\n  const cancelPromotion = () => {\n    // Revert the move\n    const {\n      fromRow,\n      fromCol,\n      toRow,\n      toCol\n    } = gameState.promotionPending;\n    const newBoard = [...gameState.board.map(row => [...row])];\n\n    // Move the pawn back\n    newBoard[fromRow][fromCol] = {\n      type: 'pawn',\n      color: gameState.promotionPending.color\n    };\n    newBoard[toRow][toCol] = null;\n    setGameState({\n      ...gameState,\n      board: newBoard,\n      promotionPending: null\n    });\n  };\n\n  // Handle game settings\n  const handleStartGame = settings => {\n    setGameSettings(settings);\n    setShowSettings(false);\n\n    // If player is black, rotate the board\n    if (settings.playerColor === 'black') {\n      // AI (white) makes the first move\n      // This will be handled by the useEffect\n    } else if (settings.playerColor === 'random') {\n      // Randomly decide player color\n      const colors = ['white', 'black'];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      setGameSettings({\n        ...settings,\n        playerColor: randomColor\n      });\n    }\n  };\n\n  // Update game status (check, checkmate, stalemate)\n  const updateGameStatus = (board, currentPlayer) => {\n    const nextPlayer = currentPlayer === 'white' ? 'black' : 'white';\n\n    // Check if the next player is in check\n    if (isKingInCheck(board, nextPlayer)) {\n      // Check if it's checkmate\n      if (isCheckmate(board, nextPlayer, gameState.castlingRights, gameState.lastMove)) {\n        setGameState(prevState => ({\n          ...prevState,\n          gameStatus: 'checkmate',\n          moveHistory: [...prevState.moveHistory, {\n            special: `${nextPlayer} is checkmated`\n          }]\n        }));\n      } else {\n        setGameState(prevState => ({\n          ...prevState,\n          gameStatus: 'check',\n          moveHistory: [...prevState.moveHistory, {\n            special: `${nextPlayer} is in check`\n          }]\n        }));\n      }\n    }\n    // Check for stalemate\n    else if (isStalemate(board, nextPlayer, gameState.castlingRights, gameState.lastMove)) {\n      setGameState(prevState => ({\n        ...prevState,\n        gameStatus: 'stalemate',\n        moveHistory: [...prevState.moveHistory, {\n          special: 'stalemate'\n        }]\n      }));\n    }\n  };\n\n  // Handle move execution\n  const handleMove = (fromRow, fromCol, toRow, toCol) => {\n    const {\n      board,\n      currentPlayer,\n      castlingRights,\n      lastMove\n    } = gameState;\n    const piece = board[fromRow][fromCol];\n    if (!piece || piece.color !== currentPlayer) return;\n\n    // Check if the move is valid\n    if (!isValidMove(board, fromRow, fromCol, toRow, toCol)) return;\n\n    // Check if the move would leave the king in check\n    if (wouldBeInCheck(board, fromRow, fromCol, toRow, toCol, currentPlayer)) return;\n\n    // Create a new board with the move\n    const newBoard = [...board.map(row => [...row])];\n\n    // Handle special moves\n\n    // 1. Castling\n    const castlingMove = getCastlingMove(board, fromRow, fromCol, toRow, toCol);\n    if (castlingMove) {\n      // Move the rook\n      newBoard[castlingMove.rookToRow][castlingMove.rookToCol] = newBoard[castlingMove.rookFromRow][castlingMove.rookFromCol];\n      newBoard[castlingMove.rookFromRow][castlingMove.rookFromCol] = null;\n    }\n\n    // 2. En passant\n    const enPassantCapture = getEnPassantCapture(board, fromRow, fromCol, toRow, toCol, lastMove);\n    if (enPassantCapture) {\n      // Remove the captured pawn\n      newBoard[enPassantCapture.captureRow][enPassantCapture.captureCol] = null;\n    }\n\n    // Make the move\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = null;\n\n    // 3. Pawn promotion\n    if (canPromotePawn(piece, toRow)) {\n      // Set promotion pending state\n      setGameState({\n        ...gameState,\n        board: newBoard,\n        promotionPending: {\n          row: toRow,\n          col: toCol,\n          color: piece.color,\n          fromRow,\n          fromCol\n        }\n      });\n      return;\n    }\n\n    // Update castling rights\n    const newCastlingRights = updateCastlingRights(castlingRights, piece, fromRow, fromCol);\n\n    // Record the move\n    const newMove = {\n      piece: piece.type,\n      color: piece.color,\n      from: {\n        row: fromRow,\n        col: fromCol\n      },\n      to: {\n        row: toRow,\n        col: toCol\n      }\n    };\n\n    // Switch player\n    const nextPlayer = currentPlayer === 'white' ? 'black' : 'white';\n\n    // Update game state\n    setGameState({\n      ...gameState,\n      board: newBoard,\n      currentPlayer: nextPlayer,\n      selectedPiece: null,\n      lastMove: newMove,\n      castlingRights: newCastlingRights,\n      moveHistory: [...gameState.moveHistory, newMove]\n    });\n\n    // Check for check, checkmate, or stalemate\n    setTimeout(() => {\n      updateGameStatus(newBoard, currentPlayer);\n    }, 0);\n  };\n  const handleSquareClick = (row, col) => {\n    // Don't allow moves if game is over or promotion is pending\n    if (gameState.gameStatus !== 'active' && gameState.gameStatus !== 'check') return;\n    if (gameState.promotionPending) return;\n\n    // In AI mode, only allow player to move their color\n    if (gameSettings.opponent === 'ai' && gameState.currentPlayer !== gameSettings.playerColor) {\n      return;\n    }\n    const {\n      board,\n      selectedPiece\n    } = gameState;\n\n    // If no piece is selected and the clicked square has a piece of the current player's color\n    if (!selectedPiece && board[row][col] && board[row][col].color === gameState.currentPlayer) {\n      setGameState({\n        ...gameState,\n        selectedPiece: {\n          row,\n          col\n        }\n      });\n      return;\n    }\n\n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setGameState({\n          ...gameState,\n          selectedPiece: null\n        });\n        return;\n      }\n\n      // If clicking on another piece of the same color, select that piece instead\n      if (board[row][col] && board[row][col].color === gameState.currentPlayer) {\n        setGameState({\n          ...gameState,\n          selectedPiece: {\n            row,\n            col\n          }\n        });\n        return;\n      }\n\n      // Attempt to move the selected piece to the clicked square\n      handleMove(selectedPiece.row, selectedPiece.col, row, col);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 7\n    }, this), showSettings ? /*#__PURE__*/_jsxDEV(GameSettings, {\n      onStartGame: handleStartGame,\n      onCancel: () => setShowSettings(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button\",\n          onClick: resetBoard,\n          children: \"Reset Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button clear-button\",\n          onClick: clearBoard,\n          children: \"Clear Board\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"control-button settings-button\",\n          onClick: () => setShowSettings(true),\n          children: \"Game Settings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"board-and-timer\",\n          children: [/*#__PURE__*/_jsxDEV(ChessBoard, {\n            board: gameState.board,\n            selectedPiece: gameState.selectedPiece,\n            onSquareClick: handleSquareClick,\n            lastMove: gameState.lastMove,\n            inCheck: gameState.gameStatus === 'check' || gameState.gameStatus === 'checkmate'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 15\n          }, this), gameSettings.timerEnabled && /*#__PURE__*/_jsxDEV(GameTimer, {\n            currentPlayer: gameState.currentPlayer,\n            gameStatus: gameState.gameStatus,\n            onTimeUp: handleTimeUp,\n            initialTime: gameSettings.timeLimit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(GameInfo, {\n          currentPlayer: gameState.currentPlayer,\n          gameStatus: gameState.gameStatus,\n          moveHistory: gameState.moveHistory,\n          opponent: gameSettings.opponent,\n          playerColor: gameSettings.playerColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 11\n      }, this), gameState.promotionPending && /*#__PURE__*/_jsxDEV(PromotionDialog, {\n        color: gameState.promotionPending.color,\n        onSelect: handlePromotion,\n        onCancel: cancelPromotion\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"tiRQM0s6dh4j6Nb9rLKhxDlPVjU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ChessBoard","GameInfo","GameTimer","PromotionDialog","GameSettings","isValidMove","wouldBeInCheck","isKingInCheck","isCheckmate","isStalemate","canPromotePawn","getCastlingMove","getEnPassantCapture","updateCastlingRights","getBestMove","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","showSettings","setShowSettings","gameSettings","setGameSettings","playerColor","opponent","aiDifficulty","timerEnabled","timeLimit","gameState","setGameState","board","initializeBoard","currentPlayer","selectedPiece","gameStatus","moveHistory","lastMove","castlingRights","whiteKingside","whiteQueenside","blackKingside","blackQueenside","promotionPending","handleTimeUp","color","special","aiMoveTimeout","setTimeout","aiMove","handleMove","fromRow","fromCol","toRow","toCol","clearTimeout","Array","fill","map","i","type","clearBoard","emptyBoard","resetBoard","handlePromotion","pieceType","row","col","newBoard","updateGameStatus","cancelPromotion","handleStartGame","settings","colors","randomColor","Math","floor","random","length","nextPlayer","prevState","piece","castlingMove","rookToRow","rookToCol","rookFromRow","rookFromCol","enPassantCapture","captureRow","captureCol","newCastlingRights","newMove","from","to","handleSquareClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onStartGame","onCancel","onClick","onSquareClick","inCheck","onTimeUp","initialTime","onSelect","_c","$RefreshReg$"],"sources":["C:/Users/aksha/AppData/Local/Programs/Microsoft VS Code/chess-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport GameTimer from './components/GameTimer';\nimport PromotionDialog from './components/PromotionDialog';\nimport GameSettings from './components/GameSettings';\nimport { \n  isValidMove, \n  wouldBeInCheck, \n  isKingInCheck, \n  isCheckmate, \n  isStalemate,\n  canPromotePawn,\n  getCastlingMove,\n  getEnPassantCapture,\n  updateCastlingRights\n} from './utils/chessRules';\nimport { getBestMove } from './utils/aiPlayer';\n\nfunction App() {\n  // Game settings state\n  const [showSettings, setShowSettings] = useState(true);\n  const [gameSettings, setGameSettings] = useState({\n    playerColor: 'white',\n    opponent: 'human',\n    aiDifficulty: 'medium',\n    timerEnabled: true,\n    timeLimit: 600 // 10 minutes in seconds\n  });\n\n  // Game state\n  const [gameState, setGameState] = useState({\n    board: initializeBoard(),\n    currentPlayer: 'white',\n    selectedPiece: null,\n    gameStatus: 'active', // active, check, checkmate, stalemate\n    moveHistory: [],\n    lastMove: null,\n    castlingRights: {\n      whiteKingside: true,\n      whiteQueenside: true,\n      blackKingside: true,\n      blackQueenside: true\n    },\n    promotionPending: null\n  });\n\n  // Timer callbacks\n  const handleTimeUp = (color) => {\n    setGameState({\n      ...gameState,\n      gameStatus: 'timeout',\n      moveHistory: [...gameState.moveHistory, {\n        special: `${color} timeout`\n      }]\n    });\n  };\n\n  // Effect for AI moves\n  useEffect(() => {\n    // Make AI move if it's AI's turn\n    if (gameSettings.opponent === 'ai' && \n        gameState.gameStatus === 'active' &&\n        gameState.currentPlayer !== gameSettings.playerColor &&\n        !gameState.promotionPending) {\n      \n      // Small delay to make AI move feel more natural\n      const aiMoveTimeout = setTimeout(() => {\n        const aiMove = getBestMove(\n          gameState.board, \n          gameState.currentPlayer, \n          gameState.castlingRights, \n          gameState.lastMove, \n          gameSettings.aiDifficulty\n        );\n        \n        if (aiMove) {\n          handleMove(aiMove.fromRow, aiMove.fromCol, aiMove.toRow, aiMove.toCol);\n        }\n      }, 500);\n      \n      return () => clearTimeout(aiMoveTimeout);\n    }\n  }, [gameState.currentPlayer, gameState.gameStatus, gameSettings.opponent]);\n\n  function initializeBoard() {\n    // Create an 8x8 board with initial chess positions\n    const board = Array(8).fill().map(() => Array(8).fill(null));\n    \n    // Set up pawns\n    for (let i = 0; i < 8; i++) {\n      board[1][i] = { type: 'pawn', color: 'black' };\n      board[6][i] = { type: 'pawn', color: 'white' };\n    }\n    \n    // Set up rooks\n    board[0][0] = { type: 'rook', color: 'black' };\n    board[0][7] = { type: 'rook', color: 'black' };\n    board[7][0] = { type: 'rook', color: 'white' };\n    board[7][7] = { type: 'rook', color: 'white' };\n    \n    // Set up knights\n    board[0][1] = { type: 'knight', color: 'black' };\n    board[0][6] = { type: 'knight', color: 'black' };\n    board[7][1] = { type: 'knight', color: 'white' };\n    board[7][6] = { type: 'knight', color: 'white' };\n    \n    // Set up bishops\n    board[0][2] = { type: 'bishop', color: 'black' };\n    board[0][5] = { type: 'bishop', color: 'black' };\n    board[7][2] = { type: 'bishop', color: 'white' };\n    board[7][5] = { type: 'bishop', color: 'white' };\n    \n    // Set up queens\n    board[0][3] = { type: 'queen', color: 'black' };\n    board[7][3] = { type: 'queen', color: 'white' };\n    \n    // Set up kings\n    board[0][4] = { type: 'king', color: 'black' };\n    board[7][4] = { type: 'king', color: 'white' };\n    \n    return board;\n  }\n\n  // Function to clear the board\n  const clearBoard = () => {\n    const emptyBoard = Array(8).fill().map(() => Array(8).fill(null));\n    \n    setGameState({\n      ...gameState,\n      board: emptyBoard,\n      selectedPiece: null,\n      moveHistory: [...gameState.moveHistory, {\n        special: 'board-cleared'\n      }]\n    });\n  };\n\n  // Function to reset the board to initial position\n  const resetBoard = () => {\n    setGameState({\n      board: initializeBoard(),\n      currentPlayer: 'white',\n      selectedPiece: null,\n      gameStatus: 'active',\n      moveHistory: [],\n      lastMove: null,\n      castlingRights: {\n        whiteKingside: true,\n        whiteQueenside: true,\n        blackKingside: true,\n        blackQueenside: true\n      },\n      promotionPending: null\n    });\n  };\n\n  // Handle promotion selection\n  const handlePromotion = (pieceType) => {\n    if (!gameState.promotionPending) return;\n    \n    const { row, col, color } = gameState.promotionPending;\n    const newBoard = [...gameState.board.map(row => [...row])];\n    \n    // Replace the pawn with the selected piece\n    newBoard[row][col] = { type: pieceType, color };\n    \n    // Update game state\n    setGameState({\n      ...gameState,\n      board: newBoard,\n      promotionPending: null,\n      moveHistory: [...gameState.moveHistory, {\n        special: `${color} pawn promoted to ${pieceType}`\n      }]\n    });\n    \n    // Check for checkmate or stalemate after promotion\n    updateGameStatus(newBoard, gameState.currentPlayer);\n  };\n\n  // Cancel promotion\n  const cancelPromotion = () => {\n    // Revert the move\n    const { fromRow, fromCol, toRow, toCol } = gameState.promotionPending;\n    const newBoard = [...gameState.board.map(row => [...row])];\n    \n    // Move the pawn back\n    newBoard[fromRow][fromCol] = { type: 'pawn', color: gameState.promotionPending.color };\n    newBoard[toRow][toCol] = null;\n    \n    setGameState({\n      ...gameState,\n      board: newBoard,\n      promotionPending: null\n    });\n  };\n\n  // Handle game settings\n  const handleStartGame = (settings) => {\n    setGameSettings(settings);\n    setShowSettings(false);\n    \n    // If player is black, rotate the board\n    if (settings.playerColor === 'black') {\n      // AI (white) makes the first move\n      // This will be handled by the useEffect\n    } else if (settings.playerColor === 'random') {\n      // Randomly decide player color\n      const colors = ['white', 'black'];\n      const randomColor = colors[Math.floor(Math.random() * colors.length)];\n      setGameSettings({\n        ...settings,\n        playerColor: randomColor\n      });\n    }\n  };\n\n  // Update game status (check, checkmate, stalemate)\n  const updateGameStatus = (board, currentPlayer) => {\n    const nextPlayer = currentPlayer === 'white' ? 'black' : 'white';\n    \n    // Check if the next player is in check\n    if (isKingInCheck(board, nextPlayer)) {\n      // Check if it's checkmate\n      if (isCheckmate(board, nextPlayer, gameState.castlingRights, gameState.lastMove)) {\n        setGameState(prevState => ({\n          ...prevState,\n          gameStatus: 'checkmate',\n          moveHistory: [...prevState.moveHistory, {\n            special: `${nextPlayer} is checkmated`\n          }]\n        }));\n      } else {\n        setGameState(prevState => ({\n          ...prevState,\n          gameStatus: 'check',\n          moveHistory: [...prevState.moveHistory, {\n            special: `${nextPlayer} is in check`\n          }]\n        }));\n      }\n    } \n    // Check for stalemate\n    else if (isStalemate(board, nextPlayer, gameState.castlingRights, gameState.lastMove)) {\n      setGameState(prevState => ({\n        ...prevState,\n        gameStatus: 'stalemate',\n        moveHistory: [...prevState.moveHistory, {\n          special: 'stalemate'\n        }]\n      }));\n    }\n  };\n\n  // Handle move execution\n  const handleMove = (fromRow, fromCol, toRow, toCol) => {\n    const { board, currentPlayer, castlingRights, lastMove } = gameState;\n    const piece = board[fromRow][fromCol];\n    \n    if (!piece || piece.color !== currentPlayer) return;\n    \n    // Check if the move is valid\n    if (!isValidMove(board, fromRow, fromCol, toRow, toCol)) return;\n    \n    // Check if the move would leave the king in check\n    if (wouldBeInCheck(board, fromRow, fromCol, toRow, toCol, currentPlayer)) return;\n    \n    // Create a new board with the move\n    const newBoard = [...board.map(row => [...row])];\n    \n    // Handle special moves\n    \n    // 1. Castling\n    const castlingMove = getCastlingMove(board, fromRow, fromCol, toRow, toCol);\n    if (castlingMove) {\n      // Move the rook\n      newBoard[castlingMove.rookToRow][castlingMove.rookToCol] = \n        newBoard[castlingMove.rookFromRow][castlingMove.rookFromCol];\n      newBoard[castlingMove.rookFromRow][castlingMove.rookFromCol] = null;\n    }\n    \n    // 2. En passant\n    const enPassantCapture = getEnPassantCapture(board, fromRow, fromCol, toRow, toCol, lastMove);\n    if (enPassantCapture) {\n      // Remove the captured pawn\n      newBoard[enPassantCapture.captureRow][enPassantCapture.captureCol] = null;\n    }\n    \n    // Make the move\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = null;\n    \n    // 3. Pawn promotion\n    if (canPromotePawn(piece, toRow)) {\n      // Set promotion pending state\n      setGameState({\n        ...gameState,\n        board: newBoard,\n        promotionPending: {\n          row: toRow,\n          col: toCol,\n          color: piece.color,\n          fromRow,\n          fromCol\n        }\n      });\n      return;\n    }\n    \n    // Update castling rights\n    const newCastlingRights = updateCastlingRights(castlingRights, piece, fromRow, fromCol);\n    \n    // Record the move\n    const newMove = {\n      piece: piece.type,\n      color: piece.color,\n      from: { row: fromRow, col: fromCol },\n      to: { row: toRow, col: toCol }\n    };\n    \n    // Switch player\n    const nextPlayer = currentPlayer === 'white' ? 'black' : 'white';\n    \n    // Update game state\n    setGameState({\n      ...gameState,\n      board: newBoard,\n      currentPlayer: nextPlayer,\n      selectedPiece: null,\n      lastMove: newMove,\n      castlingRights: newCastlingRights,\n      moveHistory: [...gameState.moveHistory, newMove]\n    });\n    \n    // Check for check, checkmate, or stalemate\n    setTimeout(() => {\n      updateGameStatus(newBoard, currentPlayer);\n    }, 0);\n  };\n\n  const handleSquareClick = (row, col) => {\n    // Don't allow moves if game is over or promotion is pending\n    if (gameState.gameStatus !== 'active' && gameState.gameStatus !== 'check') return;\n    if (gameState.promotionPending) return;\n    \n    // In AI mode, only allow player to move their color\n    if (gameSettings.opponent === 'ai' && gameState.currentPlayer !== gameSettings.playerColor) {\n      return;\n    }\n    \n    const { board, selectedPiece } = gameState;\n    \n    // If no piece is selected and the clicked square has a piece of the current player's color\n    if (!selectedPiece && board[row][col] && board[row][col].color === gameState.currentPlayer) {\n      setGameState({\n        ...gameState,\n        selectedPiece: { row, col }\n      });\n      return;\n    }\n    \n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setGameState({\n          ...gameState,\n          selectedPiece: null\n        });\n        return;\n      }\n      \n      // If clicking on another piece of the same color, select that piece instead\n      if (board[row][col] && board[row][col].color === gameState.currentPlayer) {\n        setGameState({\n          ...gameState,\n          selectedPiece: { row, col }\n        });\n        return;\n      }\n      \n      // Attempt to move the selected piece to the clicked square\n      handleMove(selectedPiece.row, selectedPiece.col, row, col);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Chess App</h1>\n      \n      {showSettings ? (\n        <GameSettings \n          onStartGame={handleStartGame} \n          onCancel={() => setShowSettings(false)} \n        />\n      ) : (\n        <>\n          <div className=\"board-controls\">\n            <button className=\"control-button\" onClick={resetBoard}>Reset Board</button>\n            <button className=\"control-button clear-button\" onClick={clearBoard}>Clear Board</button>\n            <button className=\"control-button settings-button\" onClick={() => setShowSettings(true)}>\n              Game Settings\n            </button>\n          </div>\n          \n          <div className=\"game-container\">\n            <div className=\"board-and-timer\">\n              <ChessBoard \n                board={gameState.board} \n                selectedPiece={gameState.selectedPiece}\n                onSquareClick={handleSquareClick}\n                lastMove={gameState.lastMove}\n                inCheck={gameState.gameStatus === 'check' || gameState.gameStatus === 'checkmate'}\n              />\n              \n              {gameSettings.timerEnabled && (\n                <GameTimer \n                  currentPlayer={gameState.currentPlayer}\n                  gameStatus={gameState.gameStatus}\n                  onTimeUp={handleTimeUp}\n                  initialTime={gameSettings.timeLimit}\n                />\n              )}\n            </div>\n            \n            <GameInfo \n              currentPlayer={gameState.currentPlayer}\n              gameStatus={gameState.gameStatus}\n              moveHistory={gameState.moveHistory}\n              opponent={gameSettings.opponent}\n              playerColor={gameSettings.playerColor}\n            />\n          </div>\n          \n          {gameState.promotionPending && (\n            <PromotionDialog \n              color={gameState.promotionPending.color}\n              onSelect={handlePromotion}\n              onCancel={cancelPromotion}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}