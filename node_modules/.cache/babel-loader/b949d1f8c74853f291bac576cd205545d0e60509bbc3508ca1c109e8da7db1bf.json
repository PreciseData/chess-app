{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\chess-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameState, setGameState] = useState({\n    board: initializeBoard(),\n    currentPlayer: 'white',\n    selectedPiece: null,\n    gameStatus: 'active',\n    // active, check, checkmate, stalemate\n    moveHistory: []\n  });\n  function initializeBoard() {\n    // Create an 8x8 board with initial chess positions\n    const board = Array(8).fill().map(() => Array(8).fill(null));\n\n    // Set up pawns\n    for (let i = 0; i < 8; i++) {\n      board[1][i] = {\n        type: 'pawn',\n        color: 'black'\n      };\n      board[6][i] = {\n        type: 'pawn',\n        color: 'white'\n      };\n    }\n\n    // Set up rooks\n    board[0][0] = {\n      type: 'rook',\n      color: 'black'\n    };\n    board[0][7] = {\n      type: 'rook',\n      color: 'black'\n    };\n    board[7][0] = {\n      type: 'rook',\n      color: 'white'\n    };\n    board[7][7] = {\n      type: 'rook',\n      color: 'white'\n    };\n\n    // Set up knights\n    board[0][1] = {\n      type: 'knight',\n      color: 'black'\n    };\n    board[0][6] = {\n      type: 'knight',\n      color: 'black'\n    };\n    board[7][1] = {\n      type: 'knight',\n      color: 'white'\n    };\n    board[7][6] = {\n      type: 'knight',\n      color: 'white'\n    };\n\n    // Set up bishops\n    board[0][2] = {\n      type: 'bishop',\n      color: 'black'\n    };\n    board[0][5] = {\n      type: 'bishop',\n      color: 'black'\n    };\n    board[7][2] = {\n      type: 'bishop',\n      color: 'white'\n    };\n    board[7][5] = {\n      type: 'bishop',\n      color: 'white'\n    };\n\n    // Set up queens\n    board[0][3] = {\n      type: 'queen',\n      color: 'black'\n    };\n    board[7][3] = {\n      type: 'queen',\n      color: 'white'\n    };\n\n    // Set up kings\n    board[0][4] = {\n      type: 'king',\n      color: 'black'\n    };\n    board[7][4] = {\n      type: 'king',\n      color: 'white'\n    };\n    return board;\n  }\n  const handleSquareClick = (row, col) => {\n    const {\n      board,\n      currentPlayer,\n      selectedPiece\n    } = gameState;\n\n    // If no piece is selected and the clicked square has a piece of the current player's color\n    if (!selectedPiece && board[row][col] && board[row][col].color === currentPlayer) {\n      setGameState({\n        ...gameState,\n        selectedPiece: {\n          row,\n          col\n        }\n      });\n      return;\n    }\n\n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setGameState({\n          ...gameState,\n          selectedPiece: null\n        });\n        return;\n      }\n\n      // If clicking on another piece of the same color, select that piece instead\n      if (board[row][col] && board[row][col].color === currentPlayer) {\n        setGameState({\n          ...gameState,\n          selectedPiece: {\n            row,\n            col\n          }\n        });\n        return;\n      }\n\n      // Attempt to move the selected piece to the clicked square\n      // In a real implementation, this would include move validation\n      const newBoard = [...board.map(row => [...row])];\n      const piece = newBoard[selectedPiece.row][selectedPiece.col];\n\n      // Simple move (no validation yet)\n      newBoard[row][col] = piece;\n      newBoard[selectedPiece.row][selectedPiece.col] = null;\n\n      // Update game state\n      setGameState({\n        ...gameState,\n        board: newBoard,\n        currentPlayer: currentPlayer === 'white' ? 'black' : 'white',\n        selectedPiece: null,\n        moveHistory: [...gameState.moveHistory, {\n          piece: piece.type,\n          from: {\n            row: selectedPiece.row,\n            col: selectedPiece.col\n          },\n          to: {\n            row,\n            col\n          }\n        }]\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Chess App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(ChessBoard, {\n        board: gameState.board,\n        selectedPiece: gameState.selectedPiece,\n        onSquareClick: handleSquareClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameInfo, {\n        currentPlayer: gameState.currentPlayer,\n        gameStatus: gameState.gameStatus,\n        moveHistory: gameState.moveHistory\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7mvSJOJ6CT/vsYBY94XwE8CZPAw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ChessBoard","GameInfo","jsxDEV","_jsxDEV","App","_s","gameState","setGameState","board","initializeBoard","currentPlayer","selectedPiece","gameStatus","moveHistory","Array","fill","map","i","type","color","handleSquareClick","row","col","newBoard","piece","from","to","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSquareClick","_c","$RefreshReg$"],"sources":["C:/Users/aksha/AppData/Local/Programs/Microsoft VS Code/chess-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport ChessBoard from './components/ChessBoard';\nimport GameInfo from './components/GameInfo';\n\nfunction App() {\n  const [gameState, setGameState] = useState({\n    board: initializeBoard(),\n    currentPlayer: 'white',\n    selectedPiece: null,\n    gameStatus: 'active', // active, check, checkmate, stalemate\n    moveHistory: []\n  });\n\n  function initializeBoard() {\n    // Create an 8x8 board with initial chess positions\n    const board = Array(8).fill().map(() => Array(8).fill(null));\n    \n    // Set up pawns\n    for (let i = 0; i < 8; i++) {\n      board[1][i] = { type: 'pawn', color: 'black' };\n      board[6][i] = { type: 'pawn', color: 'white' };\n    }\n    \n    // Set up rooks\n    board[0][0] = { type: 'rook', color: 'black' };\n    board[0][7] = { type: 'rook', color: 'black' };\n    board[7][0] = { type: 'rook', color: 'white' };\n    board[7][7] = { type: 'rook', color: 'white' };\n    \n    // Set up knights\n    board[0][1] = { type: 'knight', color: 'black' };\n    board[0][6] = { type: 'knight', color: 'black' };\n    board[7][1] = { type: 'knight', color: 'white' };\n    board[7][6] = { type: 'knight', color: 'white' };\n    \n    // Set up bishops\n    board[0][2] = { type: 'bishop', color: 'black' };\n    board[0][5] = { type: 'bishop', color: 'black' };\n    board[7][2] = { type: 'bishop', color: 'white' };\n    board[7][5] = { type: 'bishop', color: 'white' };\n    \n    // Set up queens\n    board[0][3] = { type: 'queen', color: 'black' };\n    board[7][3] = { type: 'queen', color: 'white' };\n    \n    // Set up kings\n    board[0][4] = { type: 'king', color: 'black' };\n    board[7][4] = { type: 'king', color: 'white' };\n    \n    return board;\n  }\n\n  const handleSquareClick = (row, col) => {\n    const { board, currentPlayer, selectedPiece } = gameState;\n    \n    // If no piece is selected and the clicked square has a piece of the current player's color\n    if (!selectedPiece && board[row][col] && board[row][col].color === currentPlayer) {\n      setGameState({\n        ...gameState,\n        selectedPiece: { row, col }\n      });\n      return;\n    }\n    \n    // If a piece is already selected\n    if (selectedPiece) {\n      // If clicking on the same piece, deselect it\n      if (selectedPiece.row === row && selectedPiece.col === col) {\n        setGameState({\n          ...gameState,\n          selectedPiece: null\n        });\n        return;\n      }\n      \n      // If clicking on another piece of the same color, select that piece instead\n      if (board[row][col] && board[row][col].color === currentPlayer) {\n        setGameState({\n          ...gameState,\n          selectedPiece: { row, col }\n        });\n        return;\n      }\n      \n      // Attempt to move the selected piece to the clicked square\n      // In a real implementation, this would include move validation\n      const newBoard = [...board.map(row => [...row])];\n      const piece = newBoard[selectedPiece.row][selectedPiece.col];\n      \n      // Simple move (no validation yet)\n      newBoard[row][col] = piece;\n      newBoard[selectedPiece.row][selectedPiece.col] = null;\n      \n      // Update game state\n      setGameState({\n        ...gameState,\n        board: newBoard,\n        currentPlayer: currentPlayer === 'white' ? 'black' : 'white',\n        selectedPiece: null,\n        moveHistory: [...gameState.moveHistory, {\n          piece: piece.type,\n          from: { row: selectedPiece.row, col: selectedPiece.col },\n          to: { row, col }\n        }]\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Chess App</h1>\n      <div className=\"game-container\">\n        <ChessBoard \n          board={gameState.board} \n          selectedPiece={gameState.selectedPiece}\n          onSquareClick={handleSquareClick}\n        />\n        <GameInfo \n          currentPlayer={gameState.currentPlayer}\n          gameStatus={gameState.gameStatus}\n          moveHistory={gameState.moveHistory}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,QAAQ,MAAM,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC;IACzCS,KAAK,EAAEC,eAAe,CAAC,CAAC;IACxBC,aAAa,EAAE,OAAO;IACtBC,aAAa,EAAE,IAAI;IACnBC,UAAU,EAAE,QAAQ;IAAE;IACtBC,WAAW,EAAE;EACf,CAAC,CAAC;EAEF,SAASJ,eAAeA,CAAA,EAAG;IACzB;IACA,MAAMD,KAAK,GAAGM,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAACC,GAAG,CAAC,MAAMF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;;IAE5D;IACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1BT,KAAK,CAAC,CAAC,CAAC,CAACS,CAAC,CAAC,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAQ,CAAC;MAC9CX,KAAK,CAAC,CAAC,CAAC,CAACS,CAAC,CAAC,GAAG;QAAEC,IAAI,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAQ,CAAC;IAChD;;IAEA;IACAX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAC9CX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAC9CX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAC9CX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAQ,CAAC;;IAE9C;IACAX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAChDX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAChDX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAChDX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAQ,CAAC;;IAEhD;IACAX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAChDX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAChDX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAChDX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAQ,CAAC;;IAEhD;IACAX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAC/CX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAQ,CAAC;;IAE/C;IACAX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAC9CX,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG;MAAEU,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAE9C,OAAOX,KAAK;EACd;EAEA,MAAMY,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACtC,MAAM;MAAEd,KAAK;MAAEE,aAAa;MAAEC;IAAc,CAAC,GAAGL,SAAS;;IAEzD;IACA,IAAI,CAACK,aAAa,IAAIH,KAAK,CAACa,GAAG,CAAC,CAACC,GAAG,CAAC,IAAId,KAAK,CAACa,GAAG,CAAC,CAACC,GAAG,CAAC,CAACH,KAAK,KAAKT,aAAa,EAAE;MAChFH,YAAY,CAAC;QACX,GAAGD,SAAS;QACZK,aAAa,EAAE;UAAEU,GAAG;UAAEC;QAAI;MAC5B,CAAC,CAAC;MACF;IACF;;IAEA;IACA,IAAIX,aAAa,EAAE;MACjB;MACA,IAAIA,aAAa,CAACU,GAAG,KAAKA,GAAG,IAAIV,aAAa,CAACW,GAAG,KAAKA,GAAG,EAAE;QAC1Df,YAAY,CAAC;UACX,GAAGD,SAAS;UACZK,aAAa,EAAE;QACjB,CAAC,CAAC;QACF;MACF;;MAEA;MACA,IAAIH,KAAK,CAACa,GAAG,CAAC,CAACC,GAAG,CAAC,IAAId,KAAK,CAACa,GAAG,CAAC,CAACC,GAAG,CAAC,CAACH,KAAK,KAAKT,aAAa,EAAE;QAC9DH,YAAY,CAAC;UACX,GAAGD,SAAS;UACZK,aAAa,EAAE;YAAEU,GAAG;YAAEC;UAAI;QAC5B,CAAC,CAAC;QACF;MACF;;MAEA;MACA;MACA,MAAMC,QAAQ,GAAG,CAAC,GAAGf,KAAK,CAACQ,GAAG,CAACK,GAAG,IAAI,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;MAChD,MAAMG,KAAK,GAAGD,QAAQ,CAACZ,aAAa,CAACU,GAAG,CAAC,CAACV,aAAa,CAACW,GAAG,CAAC;;MAE5D;MACAC,QAAQ,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,GAAGE,KAAK;MAC1BD,QAAQ,CAACZ,aAAa,CAACU,GAAG,CAAC,CAACV,aAAa,CAACW,GAAG,CAAC,GAAG,IAAI;;MAErD;MACAf,YAAY,CAAC;QACX,GAAGD,SAAS;QACZE,KAAK,EAAEe,QAAQ;QACfb,aAAa,EAAEA,aAAa,KAAK,OAAO,GAAG,OAAO,GAAG,OAAO;QAC5DC,aAAa,EAAE,IAAI;QACnBE,WAAW,EAAE,CAAC,GAAGP,SAAS,CAACO,WAAW,EAAE;UACtCW,KAAK,EAAEA,KAAK,CAACN,IAAI;UACjBO,IAAI,EAAE;YAAEJ,GAAG,EAAEV,aAAa,CAACU,GAAG;YAAEC,GAAG,EAAEX,aAAa,CAACW;UAAI,CAAC;UACxDI,EAAE,EAAE;YAAEL,GAAG;YAAEC;UAAI;QACjB,CAAC;MACH,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACEnB,OAAA;IAAKwB,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBzB,OAAA;MAAAyB,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClB7B,OAAA;MAAKwB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BzB,OAAA,CAACH,UAAU;QACTQ,KAAK,EAAEF,SAAS,CAACE,KAAM;QACvBG,aAAa,EAAEL,SAAS,CAACK,aAAc;QACvCsB,aAAa,EAAEb;MAAkB;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACF7B,OAAA,CAACF,QAAQ;QACPS,aAAa,EAAEJ,SAAS,CAACI,aAAc;QACvCE,UAAU,EAAEN,SAAS,CAACM,UAAW;QACjCC,WAAW,EAAEP,SAAS,CAACO;MAAY;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC3B,EAAA,CAzHQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA2HZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}