{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aksha\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\chess-app\\\\src\\\\context\\\\ThemeContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create a context for theme management\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // Check if user has a theme preference stored in localStorage\n  const storedTheme = localStorage.getItem('chessAppTheme');\n\n  // Initialize state with stored theme or default to 'light'\n  const [theme, setTheme] = useState(storedTheme || 'light');\n\n  // Toggle between light and dark themes\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('chessAppTheme', newTheme);\n  };\n\n  // Apply theme class to body element\n  useEffect(() => {\n    document.body.className = theme;\n  }, [theme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"hugB0BjZgmin5VJLJMFYBXEoJbA=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","storedTheme","localStorage","getItem","theme","setTheme","toggleTheme","newTheme","setItem","document","body","className","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/aksha/AppData/Local/Programs/Microsoft VS Code/chess-app/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// Create a context for theme management\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  // Check if user has a theme preference stored in localStorage\n  const storedTheme = localStorage.getItem('chessAppTheme');\n  \n  // Initialize state with stored theme or default to 'light'\n  const [theme, setTheme] = useState(storedTheme || 'light');\n  \n  // Toggle between light and dark themes\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('chessAppTheme', newTheme);\n  };\n  \n  // Apply theme class to body element\n  useEffect(() => {\n    document.body.className = theme;\n  }, [theme]);\n  \n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;;EAEzD;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACQ,WAAW,IAAI,OAAO,CAAC;;EAE1D;EACA,MAAMK,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,QAAQ,GAAGH,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDC,QAAQ,CAACE,QAAQ,CAAC;IAClBL,YAAY,CAACM,OAAO,CAAC,eAAe,EAAED,QAAQ,CAAC;EACjD,CAAC;;EAED;EACAb,SAAS,CAAC,MAAM;IACde,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAGP,KAAK;EACjC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,oBACER,OAAA,CAACC,YAAY,CAACe,QAAQ;IAACC,KAAK,EAAE;MAAET,KAAK;MAAEE;IAAY,CAAE;IAAAP,QAAA,EAClDA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACjB,EAAA,CAxBWF,aAAa;AAAAoB,EAAA,GAAbpB,aAAa;AA0B1B,eAAeA,aAAa;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}